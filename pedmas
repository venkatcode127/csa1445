#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include <math.h>

#define MAX 100

typedef struct {
    double arr[MAX];
    int top;
} Stack;

void push(Stack *s, double value) {
    if (s->top < MAX - 1)
        s->arr[++(s->top)] = value;
}

double pop(Stack *s) {
    return (s->top >= 0) ? s->arr[(s->top)--] : 0;
}

double peek(Stack *s) {
    return (s->top >= 0) ? s->arr[s->top] : 0;
}

int precedence(char op) {
    if (op == '^') return 3;
    if (op == '*' || op == '/') return 2;
    if (op == '+' || op == '-') return 1;
    return 0;
}

void infixToPostfix(char *infix, char *postfix) {
    Stack opStack = {.top = -1};
    int i = 0, j = 0;
    
    while (infix[i]) {
        if (isdigit(infix[i])) {
            while (isdigit(infix[i]) || infix[i] == '.') 
                postfix[j++] = infix[i++];
            postfix[j++] = ' ';
        } else if (infix[i] == '(') {
            push(&opStack, infix[i++]);
        } else if (infix[i] == ')') {
            while (peek(&opStack) != '(')
                postfix[j++] = pop(&opStack);
            pop(&opStack);
            i++;
        } else if (strchr("+-*/^", infix[i])) {
            while (precedence(peek(&opStack)) >= precedence(infix[i]) && peek(&opStack) != '(')
                postfix[j++] = pop(&opStack);
            push(&opStack, infix[i++]);
        } else {
            i++;
        }
    }

    while (opStack.top != -1)
        postfix[j++] = pop(&opStack);

    postfix[j] = '\0';
}

double evaluatePostfix(char *postfix) {
    Stack valStack = {.top = -1};
    int i = 0;
    
    while (postfix[i]) {
        if (isdigit(postfix[i])) {
            double num = 0;
            while (isdigit(postfix[i]) || postfix[i] == '.')
                num = num * 10 + (postfix[i++] - '0');
            push(&valStack, num);
        } else if (strchr("+-*/^", postfix[i])) {
            double b = pop(&valStack);
            double a = pop(&valStack);
            switch (postfix[i]) {
                case '+': push(&valStack, a + b); break;
                case '-': push(&valStack, a - b); break;
                case '*': push(&valStack, a * b); break;
                case '/': push(&valStack, a / b); break;
                case '^': push(&valStack, pow(a, b)); break;
            }
            i++;
        } else {
            i++;
        }
    }
    return pop(&valStack);
}

int main() {
    char infix[MAX], postfix[MAX];

    printf("Enter an arithmetic expression: ");
    fgets(infix, MAX, stdin);
    infix[strcspn(infix, "\n")] = '\0';

    infixToPostfix(infix, postfix);
    printf("Postfix Expression: %s\n", postfix);
    
    double result = evaluatePostfix(postfix);
    printf("Evaluated Result: %.2lf\n", result);

    return 0;
}
